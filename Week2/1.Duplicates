/*I. Given a sorted array of positive integers containing few duplicate elements, design an algorithm 
and implement it using a program to find whether the given key element is present in the array 
or not. If present, then also find the number of copies of given key. (Time Complexity = O(log n))
Input format:
The first line contains number of test cases, T.
For each test case, there will be three input lines.
First line contains n (the size of array).
Second line contains space-separated integers describing array.
Third line contains the key element that need to be searched in the array.
Output format: 
The output will have T number of lines. 
For each test case T, output will be the key element and its number of copies in the array if the 
key element is present in the array otherwise print “Key not present”*/

#include <iostream>
using namespace std;

int BinarySearch(int a[], int low, int high, int firstSearch, int key)
{
    int result=-1;
    if(low<high)
    {
        int mid=(low+high)/2;

        if(a[mid]==key)
        {
            result=a[mid];
            
            if(firstSearch)
                high=mid-1;
            else
                low=mid+1;
        }

        else if(a[mid]<key)
            low = mid+1;
        
        else 
            high = mid-1;
    }

    return result;

}

int main()
{
    int t;
    cout<<"Enter number of test cases : ";
    cin>>t;

    while(t--)
    {
        int n;
        cout<<"Enter array limit : ";
        cin>>n;
        int a[n];

        for(int i=0; i<n; i++)
           cin>>a[i];
        
        int key;

        cout<<"Enter the key which is to be searched  : ";
        cin>>key; 
        
        int foccu = BinarySearch(a, 0, n, 1, key);

        int lastoccu =  BinarySearch(a, 0, n, 0, key);

        int occurence = lastoccu-foccu+1;

        if(foccu!=-1)
            cout<<key <<"-" <<occurence <<endl;
        else
            cout<<"Not found." <<endl;

    }
}
