/*iii. Given an unsorted array of positive integers, design an algorithm and implement it using a 
program to find whether there are any duplicate elements in the array or not. 
(use sorting) (Time Complexity = 0(n log n))

Input Format:
The first line contains number of test cases, T. For each test case, there will be two input lines. 
First line contains n (the size of array).
Second line contains space-separated integers describing array.

Output Format:
The output will have T number of lines.
For each test case, output will be 'YES’ if duplicates are present otherwise ‘NO’.*/

#include<iostream>
using namespace std;

int* Merge(int a[], int low, int mid, int high)
{
    int i=low, j=mid+1, k=low;
    int b[mid+1];

    while(i<=mid && j<=high)
    {
        if(a[i]<a[j])
            b[k++]=a[i++];
        else
            b[k++]=a[j++];
    }

    for( ; i<=mid; i++)
        b[k++]=a[i];
    
    for( ; j<=high; j++)
        b[k++]=a[j];
    
    for(i=low; i<=high; i++)
        a[i]=b[i];

    return a;

}

int* MergeSort(int a[], int low, int high)
{
    if(low<high)
    {
        int mid=(low+high)/2;
        MergeSort(a, low, mid);
        MergeSort(a, mid+1, high);
        Merge(a, low, mid, high);
    }

    return a;
}

void Duplicates(int a[], int n)
{
    for(int i=0; i<n; i++)
    {
        if(a[i]==a[i+1])
        {
            cout<<"YES" <<endl;
            return;
        }
    }

    cout<<"NO" <<endl;
    return;
}

int main()
{
    int t;
    cout<<"Enter number of test cases : ";
    cin>>t;

    while(t--)
    {
        int n;
        cout<<"Enter array limit : ";
        cin>>n;

        int a[n];

        cout<<"Enter array's elements : ";
        for(int i=0; i<n; i++)
            cin>>a[i];

        int low = 0, high = n-1;

        MergeSort(a, low, high);

        Duplicates(a, n);

        return 0;
    }
}
